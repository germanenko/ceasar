using System.IO;
using System.Text.RegularExpressions;
using DTT.CodeGeneration;
using UnityEditor;
using UnityEditor.Compilation;
using UnityEngine;

namespace DTT.COLOR.Editor
{
    /// <summary>
    /// Generates the source code for the code palette data.
    /// </summary>
    public class PaletteCodeGenerator
    {
        /// <summary>
        /// The database used for determining all data.
        /// </summary>
        private readonly PaletteDatabase _database;

        /// <summary>
        /// Creates a new code generator.
        /// </summary>
        /// <param name="database">The database used for determining all data.</param>
        public PaletteCodeGenerator(PaletteDatabase database) => _database = database;

        /// <summary>
        /// Generates the code to the given path or overwrites it.
        /// </summary>
        /// <param name="path">The path to generate to.</param>
        public void GenerateCode(string path)
        {
            Regex regexWhitespace = new Regex(@"\s+", RegexOptions.Compiled);
            
            IScriptBuilder scriptBuilder = new ScriptBuilder();
            scriptBuilder.SetDisclaimer("THIS IS A FILE GENERATED BY DTT COLOR", "ANY CHANGES MADE WILL BE OVERRIDDEN");
            scriptBuilder.SetNamespace("DTT");
            scriptBuilder.ImportNamespace("DTT.COLOR");
            scriptBuilder.ImportNamespace("System");

            foreach (Palette palette in _database.Palettes)
            {
                string className = regexWhitespace.Replace(palette.Name, string.Empty);
                IClassBuilder classBuilder = scriptBuilder.AddClass(className).SetAccess(AccessModifier.PUBLIC).SetStatic(true);
                foreach (PaletteColor color in palette)
                {
                    string varName = regexWhitespace.Replace(color.Name, string.Empty);

                    string getValue = "PaletteDatabase.Instance.GetColor(Guid.Parse(\"{0}\"), Guid.Parse(\"{1}\")).Color";
                    classBuilder.AddProperty(varName, typeof(Color)).SetAccess(AccessModifier.PUBLIC).SetStatic(true).SetGetValue(string.Format(getValue, palette.GUID, color.GUID));
                }
            }

            File.WriteAllText(Path.Combine(path, "Generated.cs"), scriptBuilder.Export());
            CompilationPipeline.RequestScriptCompilation();
            AssetDatabase.Refresh();
        }
    }
}